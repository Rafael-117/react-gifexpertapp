{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFechGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFechGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGe,SAASA,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EACjBC,mBAAS,IADQ,mBAC9CC,EAD8C,KAClCC,EADkC,KAerD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,mCCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXhB,kBAedM,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OADAc,QAAQC,IAAIL,GAEV,sBAAKM,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCFGS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFd,SAACA,GAAc,IAAD,EACbd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAH4B,mBAChCC,EADgC,KACzBC,EADyB,KAgBvC,OAVAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAACC,GACtBH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGZ,CAACtB,IAEJgB,QAAQC,IAAIjB,GACLuB,EDb2BK,CAAY5B,GAAhCa,EADyB,EAC/BN,KAAce,EADiB,EACjBA,QACtB,OACE,qCACE,6BAAKtB,IACJsB,GAAW,4CACZ,qBAAKJ,UAAU,8CAAf,SACGL,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEOjBkB,EAhBM,WAAO,IAAD,EACW3C,mBAAS,CAAC,YADrB,mBAClB4C,EADkB,KACN7C,EADM,KAGzB,OACE,gCACE,8CACA,cAACD,EAAD,CAAaC,cAAeA,IAC3B6C,EAAWrB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,MAGhB,2B,MCVN+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.d2dc6ba3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function AddCategory({ setCategories }) {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 0) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=3wJVFQ25F9EJNDAE9UOuIx9Qx8QPEFAS`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n  console.log(title)\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFechGifs } from \"../hooks/useFechGifs\";\n// import { getGifs } from \"../helpers/getGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFechGifs(category);\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p>Loading ...</p>}\n      <div className=\"card-grid animate__animated animate__bounce\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFechGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setstate({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  console.log(category);\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Escanor\"]);\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      {categories.map((category) => (\n        <GifGrid key={category} category={category} />\n      ))}\n\n      <hr />\n    </div>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}